name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC to catch dependency issues
    - cron: '0 2 * * *'

env:
  GO_VERSION: '1.24'
  COVERAGE_THRESHOLD: 80

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    strategy:
      matrix:
        go-version: ['1.24']
        test-type: ['unit', 'integration', 'dao']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Install dependencies
      run: |
        go mod download
        go mod verify

    - name: Install test dependencies
      run: |
        # Install golangci-lint
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2

        # Install gosec
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

        # Install test coverage tools
        go install github.com/boumenot/gocover-cobertura@latest

    - name: Run Unit Tests
      if: matrix.test-type == 'unit'
      run: |
        go test -v -race -coverprofile=unit-coverage.out -covermode=atomic \
          -tags=unit \
          -timeout=10m \
          ./pkg/... ./internal/... -exclude=./internal/dao/...

    - name: Run DAO Integration Tests
      if: matrix.test-type == 'dao'
      run: |
        go test -v -race -coverprofile=dao-coverage.out -covermode=atomic \
          -tags=integration \
          -timeout=15m \
          ./internal/dao/...

    - name: Run Command Integration Tests
      if: matrix.test-type == 'integration'
      run: |
        go test -v -race -coverprofile=cmd-coverage.out -covermode=atomic \
          -tags=integration \
          -timeout=20m \
          ./cmd/test/...

    - name: Upload coverage to Codecov
      if: matrix.test-type == 'unit'
      uses: codecov/codecov-action@v4
      with:
        file: ./unit-coverage.out
        flags: unit
        name: unit-tests

    - name: Upload DAO coverage to Codecov
      if: matrix.test-type == 'dao'
      uses: codecov/codecov-action@v4
      with:
        file: ./dao-coverage.out
        flags: dao
        name: dao-tests

    - name: Upload command coverage to Codecov
      if: matrix.test-type == 'integration'
      uses: codecov/codecov-action@v4
      with:
        file: ./cmd-coverage.out
        flags: integration
        name: integration-tests

    - name: Check coverage threshold
      if: matrix.test-type == 'unit'
      run: |
        COVERAGE=$(go tool cover -func=unit-coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < $COVERAGE_THRESHOLD" | bc -l) )); then
          echo "Coverage ${COVERAGE}% is below threshold ${COVERAGE_THRESHOLD}%"
          exit 1
        fi

  lint:
    name: Lint and Security Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}

    - name: Install dependencies
      run: go mod download

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: v1.55.2
        args: --timeout=10m --config=.golangci.yml

    - name: Run gosec security scanner
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec -config .gosec.json -fmt sarif -out gosec-results.sarif ./...

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec-results.sarif

  build:
    name: Build and Test Binary
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}

    - name: Install dependencies
      run: go mod download

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p build
        BINARY_NAME="gibson-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        go build -o build/${BINARY_NAME} -ldflags="-s -w" ./cmd/gibson

    - name: Test binary (Linux only)
      if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
      run: |
        ./build/gibson-linux-amd64 --version
        ./build/gibson-linux-amd64 --help

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gibson-${{ matrix.goos }}-${{ matrix.goarch }}
        path: build/

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}

    - name: Install dependencies
      run: go mod download

    - name: Run benchmarks
      run: |
        go test -bench=. -benchmem -run=^$ \
          -timeout=30m \
          ./internal/dao/... ./pkg/... > benchmark-results.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark-results.txt

  integration-database:
    name: Database Integration Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: go mod download

    - name: Run SQLite tests
      run: |
        go test -v -race -tags=database \
          -timeout=15m \
          ./internal/dao/...

    - name: Test PostgreSQL compatibility (if applicable)
      env:
        POSTGRES_URL: postgres://testuser:testpass@localhost:5432/testdb?sslmode=disable
      run: |
        # Add PostgreSQL compatibility tests here if needed
        echo "PostgreSQL service is running and accessible"

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: go mod download

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run nancy for dependency vulnerabilities
      run: |
        go install github.com/sonatypecommunity/nancy@latest
        go list -json -deps ./... | nancy sleuth

  docs:
    name: Documentation Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Check Go documentation
      run: |
        go install golang.org/x/tools/cmd/godoc@latest
        # Check for package documentation
        go doc ./...

    - name: Validate README and documentation
      run: |
        # Check if README exists and has content
        if [ ! -f README.md ] || [ ! -s README.md ]; then
          echo "README.md is missing or empty"
          exit 1
        fi

        # Check for basic documentation structure
        if ! grep -q "Installation" README.md; then
          echo "README.md should contain Installation section"
          exit 1
        fi

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test, lint, build, benchmark, integration-database, security]
    if: always()

    steps:
    - name: Test Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Lint & Security | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Benchmarks | ${{ needs.benchmark.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Database Integration | ${{ needs.integration-database.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY

        # Check if any jobs failed
        if [[ "${{ needs.test.result }}" == "failure" ||
              "${{ needs.lint.result }}" == "failure" ||
              "${{ needs.build.result }}" == "failure" ||
              "${{ needs.integration-database.result }}" == "failure" ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "❌ **One or more critical jobs failed. Please review the logs.**" >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **All tests passed successfully!**" >> $GITHUB_STEP_SUMMARY
        fi